if k8s_context() != "${K8S_PLATFORM}-otel-basic":
  fail("Expected context to be ${K8S_PLATFORM}-otel-basic")

USE_ARGO = os.getenv("DEPLOY_ARGO", False)
USE_WEBHOOK = os.getenv("DEPLOY_WEBHOOK", False)
USE_LGTM = os.getenv("DEPLOY_LGTM", False)
USE_JAEGER = os.getenv("DEPLOY_JAEGER", False)

include("../cluster-infra/cert-manager/Tiltfile")
include("../cluster-infra/otel-operator/Tiltfile")

if USE_ARGO:
    include("./argocd/Tiltfile")

if USE_WEBHOOK:
    include("../collectors/webhook/Tiltfile")

if USE_LGTM:
    include("./lgtm/Tiltfile")

if USE_JAEGER:
    include("./jaeger/Tiltfile")

k8s_yaml(kustomize("."), allow_duplicates=True)

k8s_resource(
  objects=[
    "gateway:opentelemetrycollector"
  ],
  new_name="gateway-collector",
  port_forwards=[
    port_forward(4319, 4317, name='otlp-grpc'),
    port_forward(4318, 4318, name='otlp-http')
  ],
  labels=[
    "gateway-collector"
  ],
  resource_deps=[
    "opentelemetry-operator-controller-manager"
  ]
)

k8s_resource(
  workload="openobserve",
  port_forwards=5080,
  labels=[
    "default-apps"
  ]
)

